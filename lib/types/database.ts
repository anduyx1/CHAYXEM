/**
 * This file was auto-generated by @vercel/mysql and should not be edited.
 * It is used to provide type safety for the database.
 */
import type { RowDataPacket } from "mysql2"

export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export type Database = {
  public: {
    Tables: {
      categories: {
        Row: {
          created_at: Date
          description: string | null
          id: number
          name: string
          updated_at: Date
        }
        Insert: {
          created_at?: Date
          description?: string | null
          id?: number
          name: string
          updated_at?: Date
        }
        Update: {
          created_at?: Date
          description?: string | null
          id?: number
          name?: string
          updated_at?: Date
        }
        Relationships: []
      }
      customers: {
        Row: {
          address: string | null
          created_at: Date
          customer_type: "new" | "regular" | "vip" | null
          date_of_birth: Date | null
          email: string | null
          id: number
          name: string
          phone: string | null
          total_orders: number | null
          total_spent: number | null
          updated_at: Date
        }
        Insert: {
          address?: string | null
          created_at?: Date
          customer_type?: "new" | "regular" | "vip" | null
          date_of_birth?: Date | null
          email?: string | null
          id?: number
          name: string
          phone?: string | null
          total_orders?: number | null
          total_spent?: number | null
          updated_at?: Date
        }
        Update: {
          address?: string | null
          created_at?: Date
          customer_type?: "new" | "regular" | "vip" | null
          date_of_birth?: Date | null
          email?: string | null
          id?: number
          name?: string
          phone?: string | null
          total_orders?: number | null
          total_spent?: number | null
          updated_at?: Date
        }
        Relationships: []
      }
      suppliers: {
        Row: {
          address: string | null
          created_at: Date
          email: string | null
          id: number
          name: string
          phone: string | null
          updated_at: Date
        }
        Insert: {
          address?: string | null
          created_at?: Date
          email?: string | null
          id?: number
          name: string
          phone?: string | null
          updated_at?: Date
        }
        Update: {
          address?: string | null
          created_at?: Date
          email?: string | null
          id?: number
          name?: string
          phone?: string | null
          updated_at?: Date
        }
        Relationships: []
      }
      invoice_settings: {
        Row: {
          business_address: string
          business_name: string
          business_phone: string
          business_tax_id: string
          created_at: Date
          header_font_size: string
          id: number
          logo_url: string | null
          show_customer_info: boolean
          show_discount: boolean
          show_notes: boolean
          show_tax: boolean
          text_color: string
          updated_at: Date
        }
        Insert: {
          business_address?: string
          business_name?: string
          business_phone?: string
          business_tax_id?: string
          created_at?: Date
          header_font_size?: string
          id?: number
          logo_url?: string | null
          show_customer_info?: boolean
          show_discount?: boolean
          show_notes?: boolean
          show_tax?: boolean
          text_color?: string
          updated_at?: Date
        }
        Update: {
          business_address?: string
          business_name?: string
          business_phone?: string
          business_tax_id?: string
          created_at?: Date
          header_font_size?: string
          id?: number
          logo_url?: string | null
          show_customer_info?: boolean
          show_discount?: boolean
          show_notes?: boolean
          show_tax?: boolean
          text_color?: string
          updated_at?: Date
        }
        Relationships: []
      }
      order_items: {
        Row: {
          cost_price: number | null
          created_at: Date
          id: number
          is_service: boolean | null
          order_id: number
          product_id: number | null
          product_name: string
          quantity: number
          return_reason: string | null
          returned_at: Date | null
          returned_quantity: number | null
          total_price: number
          unit_price: number
          updated_at: Date
        }
        Insert: {
          cost_price?: number | null
          created_at?: Date
          id?: number
          is_service?: boolean | null
          order_id: number
          product_id?: number | null
          product_name: string
          quantity: number
          return_reason?: string | null
          returned_at?: Date | null
          returned_quantity?: number | null
          total_price?: number
          unit_price?: number
          updated_at?: Date
        }
        Update: {
          cost_price?: number | null
          created_at?: Date
          id?: number
          is_service?: boolean | null
          order_id?: number
          product_id?: number | null
          product_name?: string
          quantity?: number
          return_reason?: string | null
          returned_at?: Date | null
          returned_quantity?: number | null
          total_price?: number
          unit_price?: number
          updated_at?: Date
        }
        Relationships: [
          {
            foreignKeyName: "order_items_order_id_fkey"
            columns: ["order_id"]
            isOneToOne: false
            referencedRelation: "orders"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "order_items_product_id_fkey"
            columns: ["product_id"]
            isOneToOne: false
            referencedRelation: "products"
            referencedColumns: ["id"]
          },
        ]
      }
      orders: {
        Row: {
          created_at: Date
          created_by: number | null
          customer_id: number | null
          discount_amount: number
          notes: string | null
          order_number: string
          order_status: string
          payment_method: string
          payment_status: string
          refund_amount: number | null
          subtotal: number
          tax_amount: number
          total_amount: number
          id: number
          updated_at: Date
        }
        Insert: {
          created_at?: Date
          created_by?: number | null
          customer_id?: number | null
          discount_amount?: number
          notes?: string | null
          order_number: string
          order_status?: string
          payment_method: string
          payment_status?: string
          refund_amount?: number | null
          subtotal?: number
          tax_amount?: number
          total_amount?: number
          id?: number
          updated_at?: Date
        }
        Update: {
          created_at?: Date
          created_by?: number | null
          customer_id?: number | null
          discount_amount?: number
          notes?: string | null
          order_number?: string
          order_status?: string
          payment_method?: string
          payment_status?: string
          refund_amount?: number | null
          subtotal?: number
          tax_amount?: number
          total_amount?: number
          id?: number
          updated_at?: Date
        }
        Relationships: [
          {
            foreignKeyName: "orders_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "orders_customer_id_fkey"
            columns: ["customer_id"]
            isOneToOne: false
            referencedRelation: "customers"
            referencedColumns: ["id"]
          },
        ]
      }
      pos_app_settings: {
        Row: {
          created_at: Date
          default_pre_receipt_template_id: string | null
          default_receipt_template_id: string | null
          id: string
          last_order_sequence: number | null
          shop_address: string
          shop_name: string
          shop_phone: string | null
          tax_rate: number
          updated_at: Date
        }
        Insert: {
          created_at?: Date
          default_pre_receipt_template_id?: string | null
          default_receipt_template_id?: string | null
          id?: string
          last_order_sequence?: number | null
          shop_address?: string
          shop_name?: string
          shop_phone?: string | null
          tax_rate?: number
          updated_at?: Date
        }
        Update: {
          created_at?: Date
          default_pre_receipt_template_id?: string | null
          default_receipt_template_id?: string | null
          id?: string
          last_order_sequence?: number | null
          shop_address?: string
          shop_name?: string
          shop_phone?: string | null
          tax_rate?: number
          updated_at?: Date
        }
        Relationships: []
      }
      pos_sessions: {
        Row: {
          cart_items: CartItem[] | null
          created_at: Date | null
          customer_id: number | null
          discount_amount: number | null
          id: number
          notes: string | null
          received_amount: number | null
          session_name: string
          tax_rate: number | null
          updated_at: Date | null
          user_id: number | null
        }
        Insert: {
          cart_items?: CartItem[] | null
          created_at?: Date | null
          customer_id?: number | null
          discount_amount?: number | null
          id?: number
          notes?: string | null
          received_amount?: number | null
          session_name: string
          tax_rate?: number | null
          updated_at?: Date | null
          user_id?: number | null
        }
        Update: {
          cart_items?: CartItem[] | null
          created_at?: Date | null
          customer_id?: number | null
          discount_amount?: number | null
          id?: number
          notes?: string | null
          received_amount?: number | null
          session_name?: string
          tax_rate?: number | null
          updated_at?: Date | null
          user_id?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "pos_sessions_customer_id_fkey"
            columns: ["customer_id"]
            isOneToOne: false
            referencedRelation: "customers"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "pos_sessions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      print_templates: {
        Row: {
          content: string
          created_at: Date | null
          id: number
          is_default: boolean
          name: string
          type: "receipt" | "pre_receipt"
          updated_at: Date | null
        }
        Insert: {
          content: string
          created_at?: Date | null
          id?: number
          is_default?: boolean
          name: string
          type: "receipt" | "pre_receipt"
          updated_at?: Date | null
        }
        Update: {
          content?: string
          created_at?: Date | null
          id?: number
          is_default?: boolean
          name?: string
          type?: "receipt" | "pre_receipt"
          updated_at?: Date | null
        }
        Relationships: []
      }
      products: {
        Row: {
          barcode: string | null
          category_id: number | null
          cost_price: number | null
          created_at: Date
          description: string | null
          id: number
          image_data: Record<string, unknown> | null
          image_url: string | null
          is_service: boolean | null
          min_stock_level: number | null
          name: string
          retail_price: number
          sku: string | null
          status: string | null
          stock_quantity: number
          updated_at: Date
          wholesale_price: number | null
        }
        Insert: {
          barcode?: string | null
          category_id?: number | null
          cost_price?: number | null
          created_at?: Date
          description?: string | null
          id?: number
          image_data?: Record<string, unknown> | null
          image_url?: string | null
          is_service?: boolean | null
          min_stock_level?: number | null
          name: string
          retail_price?: number
          sku?: string | null
          status?: string | null
          stock_quantity?: number
          updated_at?: Date
          wholesale_price?: number | null
        }
        Update: {
          barcode?: string | null
          category_id?: number | null
          cost_price?: number | null
          created_at?: Date
          description?: string | null
          id?: number
          image_data?: Record<string, unknown> | null
          image_url?: string | null
          is_service?: boolean | null
          min_stock_level?: number | null
          name?: string
          retail_price?: number
          sku?: string | null
          status?: string | null
          stock_quantity?: number
          updated_at?: Date
          wholesale_price?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "products_category_id_fkey"
            columns: ["category_id"]
            isOneToOne: false
            referencedRelation: "categories"
            referencedColumns: ["id"]
          },
        ]
      }
      roles: {
        Row: {
          created_at: Date
          description: string | null
          display_name: string
          id: number
          name: string
          permissions: string[] // JSON array in DB
          updated_at: Date
        }
        Insert: {
          created_at?: Date
          description?: string | null
          display_name: string
          id?: number
          name: string
          permissions?: string[] // JSON array in DB
          updated_at?: Date
        }
        Update: {
          created_at?: Date
          description?: string | null
          display_name?: string
          id?: number
          name?: string
          permissions?: string[] // JSON array in DB
          updated_at?: Date
        }
        Relationships: []
      }
      settings: {
        Row: {
          key: string
          value: string | null
        }
        Insert: {
          key: string
          value?: string | null
        }
        Update: {
          key?: string
          value?: string | null
        }
        Relationships: []
      }
      stock_movements: {
        Row: {
          created_at: Date
          created_by: number | null
          id: number
          movement_type: string
          product_id: number
          quantity_change: number
          reason: string | null
        }
        Insert: {
          created_at?: Date
          created_by?: number | null
          id?: number
          movement_type: string
          product_id: number
          quantity_change: number
          reason?: string | null
        }
        Update: {
          created_at?: Date
          created_by?: number | null
          id?: number
          movement_type?: string
          product_id?: number
          quantity_change?: number
          reason?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "stock_movements_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "stock_movements_product_id_fkey"
            columns: ["product_id"]
            isOneToOne: false
            referencedRelation: "products"
            referencedColumns: ["id"]
          },
        ]
      }
      user_sessions: {
        Row: {
          created_at: string
          expires_at: string
          id: string
          session_token: string
          user_id: number
        }
        Insert: {
          created_at?: string
          expires_at?: string
          id?: string
          session_token: string
          user_id: number
        }
        Update: {
          created_at?: string
          expires_at?: string
          id?: string
          session_token?: string
          user_id?: number
        }
        Relationships: [
          {
            foreignKeyName: "user_sessions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      users: {
        Row: {
          avatar_url: string | null
          created_at: Date
          created_by: number | null
          email: string | null
          full_name: string
          id: number
          is_active: boolean
          last_login: Date | null
          password_hash: string
          phone: string | null
          role_id: number
          updated_at: Date
          user_id: string
          username: string
        }
        Insert: {
          avatar_url?: string | null
          created_at?: Date
          created_by?: number | null
          email?: string | null
          full_name: string
          id?: number
          is_active?: boolean
          last_login?: Date | null
          password_hash: string
          phone?: string | null
          role_id: number
          updated_at?: Date
          user_id: string
          username: string
        }
        Update: {
          avatar_url?: string | null
          created_at?: Date
          created_by?: number | null
          email?: string | null
          full_name?: string
          id?: number
          is_active?: boolean
          last_login?: Date | null
          password_hash?: string
          phone?: string | null
          role_id?: number
          updated_at?: Date
          user_id?: string
          username?: string
        }
        Relationships: [
          {
            foreignKeyName: "users_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "users_role_id_fkey"
            columns: ["role_id"]
            isOneToOne: false
            referencedRelation: "roles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      customer_type: "new" | "regular" | "vip"
      template_type: "receipt" | "pre_receipt"
      stock_movement_type: "in" | "out" | "adjustment" | "return" | "damage" | "transfer"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] & PublicSchema["Views"]) | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    ? (PublicSchema["Tables"] & PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends keyof PublicSchema["Tables"] | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends keyof PublicSchema["Tables"] | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends keyof PublicSchema["Enums"] | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

// Custom types for extended product data
export type Product = Tables<"products"> & {
  category?: Tables<"categories">["name"] | null // Join with categories table
  price?: number // This is a computed field, not directly from DB
  image_data?: Record<string, unknown> | null // Replace any with proper Record type for image_data
}

export type Category = Tables<"categories">

export type Customer = Tables<"customers">

export type Supplier = Tables<"suppliers">

// Updated User type to match SQL schema
export type User = Tables<"users">

export type POSSession = Tables<"pos_sessions">

export type PrintTemplate = Tables<"print_templates">

// Extended StockMovement type with additional fields for product detail page
export type StockMovement = Tables<"stock_movements"> & {
  stock_after?: number
  reference_id?: string
  created_by_name?: string
}

// Renamed from Settings to PosAppSettings to match SQL table name
export type PosAppSettings = Tables<"pos_app_settings">

// New type for the 'settings' table (key-value pairs)
export type AppSettings = Tables<"settings">

// Explicit type for CartItem
export type CartItem = {
  id: number // Product ID
  name: string
  price: number
  cost?: number
  quantity: number
  stock_quantity: number // Current stock quantity of the product
  is_service: boolean
  image_url?: string | null // Added for consistency
  barcode?: string | null // Added for consistency
  sku?: string | null // Added for consistency
}

// New type for file download results
export type FileDownloadResult = {
  success: boolean
  message: string
  fileData?: string // Base64 encoded file content
  fileName?: string
  error?: string
}

export type OrderItem = {
  id: number
  order_id: number
  product_id: number | null // Can be null if product is deleted
  product_name: string
  quantity: number
  unit_price: number
  total_price: number
  returned_quantity: number | null
  returned_at?: Date | null
  return_reason?: string | null
  cost_price: number | null // Added for profit calculation
  is_service: boolean | null
  product?: {
    // Nested product details for order items
    id: number
    barcode?: string | null
    sku?: string | null
  } | null
}

export type Order = {
  id: number
  customer_id?: number | null
  order_number: string
  subtotal: number
  tax_amount: number
  discount_amount: number
  total_amount: number
  payment_method: string
  payment_status: string
  order_status: string
  created_at: Date
  updated_at: Date | null
  refund_amount: number | null
  notes?: string | null
  created_by?: number | null // User ID who created the order
  customer?: {
    id?: number
    name: string
    email?: string | null
  } | null
  order_items?: OrderItem[]
}

export type GoodsReceiptItem = {
  productId: number
  productName: string
  barcode: string | null
  sku: string | null
  imageUrl: string | null
  unitPrice: number
  quantity: number
  discount: number
  stockQuantity: number // Current stock quantity of the product
}

export type GoodsReceipt = {
  supplierId: number | null
  receiptDate?: string | null
  totalAmount?: number
  notes?: string | null
  tags?: string | null
  items: GoodsReceiptItem[]
}

export type StockAdjustment = {
  productId: number
  adjustmentType: "increase" | "decrease" | "initial_stock"
  quantityChange: number
  reason: string | null
  adjustmentDate?: string | null
}

export type Report = {
  date: string
  totalSales: number
  totalOrders: number
  totalProductsSold: number
  averageOrderValue: number
  grossProfit: number
}

export type SalesDataPoint = {
  sale_date: string
  total_sales: number
  day_of_week: string
}

export type SalesByCategory = {
  category_name: string | null
  total_revenue: number
  total_quantity_sold: number
}

export type SalesByPaymentMethod = {
  payment_method: string
  total_revenue: number
}

export type GrossProfitPerOrder = {
  order_number: string
  total_gross_profit: number
  total_amount: number
}

// Utility type for database rows that might be partial or full
export type DbRow<T> = T

// Combined types for database query results
export type UserWithRole = Tables<"users"> & {
  role_name: string
  role_display_name: string
  role_permissions: string[]
}

export type ProductWithCategory = Product & {
  category_name?: string
}

export type OrderWithCustomerAndItems = Order & {
  customer?: Customer
  items: OrderItem[]
}

// For MySQL2 RowDataPacket compatibility
export type UserRow = Tables<"users"> & RowDataPacket
export type RoleRow = Tables<"roles"> & RowDataPacket
export type CategoryRow = Tables<"categories"> & RowDataPacket
export type ProductRow = Tables<"products"> & RowDataPacket
export type CustomerRow = Tables<"customers"> & RowDataPacket
export type SupplierRow = Tables<"suppliers"> & RowDataPacket
export type OrderRow = Tables<"orders"> & RowDataPacket
export type OrderItemRow = Tables<"order_items"> & RowDataPacket
export type StockMovementRow = Tables<"stock_movements"> & RowDataPacket
export type PosAppSettingsRow = Tables<"pos_app_settings"> & RowDataPacket
export type PrintTemplateRow = Tables<"print_templates"> & RowDataPacket
export type InvoiceSettingsRow = Tables<"invoice_settings"> & RowDataPacket
export type POSSessionRow = Tables<"pos_sessions"> & RowDataPacket
export type AppSettingsRow = Tables<"settings"> & RowDataPacket

export type StockMovementType = "in" | "out" | "adjustment" | "return" | "damage" | "transfer"

export type InvoiceSettings = Tables<"invoice_settings">

export type NewCustomer = Omit<Customer, "id" | "created_at" | "updated_at">

export type NewProduct = Omit<Product, "id" | "created_at" | "updated_at" | "category">

export type StoreSettings = {
  store_name: string
  store_address: string
  store_phone: string
  store_email: string
  tax_rate: number
  currency: string
  receipt_footer: string
}

export type Role = Tables<"roles">

export type PosSession = POSSession
export type Settings = AppSettings
